diff --git a/backend/app/Services/Infrastructure/HtmlPurifier/HtmlPurifierService.php b/backend/app/Services/Infrastructure/HtmlPurifier/HtmlPurifierService.php
index efefb4f..77088ed 100644
--- a/backend/app/Services/Infrastructure/HtmlPurifier/HtmlPurifierService.php
+++ b/backend/app/Services/Infrastructure/HtmlPurifier/HtmlPurifierService.php
@@ -18,6 +18,11 @@ public function __construct(private readonly HTMLPurifier $htmlPurifier)
         File::ensureDirectoryExists($cachePath, 0755);
 
         $this->config->set('Cache.SerializerPath', $cachePath);
+
+        // For testing I'm allowing all iframe sources, it's safer to lock it down to expected URLs
+        $this->config->set('HTML.AllowedElements', 'p,b,i,u,s,strong,em,li,ul,ol,br,span,img,a,iframe');
+        $this->config->set('HTML.SafeIframe', true);
+        $this->config->set('URI.SafeIframeRegexp', '/.*/');
     }
 
     public function purify(?string $html): string
diff --git a/frontend/src/components/common/Editor/Controls/InsertIframeControl/index.tsx b/frontend/src/components/common/Editor/Controls/InsertIframeControl/index.tsx
index 4049298..b80d04c 100644
--- a/frontend/src/components/common/Editor/Controls/InsertIframeControl/index.tsx
+++ b/frontend/src/components/common/Editor/Controls/InsertIframeControl/index.tsx
@@ -1,8 +1,8 @@
-import { RichTextEditor, useRichTextEditorContext } from "@mantine/tiptap";
-import { useCallback, useState } from "react";
-import { t } from "@lingui/macro";
-import { IconBrandYoutube } from "@tabler/icons-react";
-import { Button, Group, Modal, Portal, TextInput, NumberInput } from "@mantine/core";
+import {RichTextEditor, useRichTextEditorContext} from "@mantine/tiptap";
+import {useCallback, useState} from "react";
+import {t} from "@lingui/macro";
+import {IconBrandYoutube} from "@tabler/icons-react";
+import {Button, Group, Modal, Portal, TextInput} from "@mantine/core";
 
 export const InsertIframeControl = () => {
     const editor = useRichTextEditorContext();
@@ -51,62 +51,62 @@ export const InsertIframeControl = () => {
         <>
             <RichTextEditor.Control
                 onClick={() => setModalOpen(true)}
-    aria-label="Insert iframe"
-    title="Insert iframe"
-    >
-    <IconBrandYoutube stroke={1.5} size="1rem" />
-    </RichTextEditor.Control>
+                aria-label="Insert iframe"
+                title="Insert iframe"
+            >
+                <IconBrandYoutube stroke={1.5} size="1rem"/>
+            </RichTextEditor.Control>
 
-    <Portal>
-    <Modal
-        opened={isModalOpen}
-    onClose={() => setModalOpen(false)}
-    title={t`Insert Iframe`}
-    >
-    <TextInput
-        label={t`Iframe URL`}
-    placeholder="https://www.youtube.com/embed/dQw4w9WgXcQ"
-    value={iframeUrl}
-    onChange={(event) => {
-        setIframeUrl(event.currentTarget.value);
-        setUrlError(null);
-    }}
-    error={urlError}
-    required
-    mb="md"
-    />
+            <Portal>
+                <Modal
+                    opened={isModalOpen}
+                    onClose={() => setModalOpen(false)}
+                    title={t`Insert Iframe`}
+                >
+                    <TextInput
+                        label={t`Iframe URL`}
+                        placeholder="https://www.youtube.com/embed/dQw4w9WgXcQ"
+                        value={iframeUrl}
+                        onChange={(event) => {
+                            setIframeUrl(event.currentTarget.value);
+                            setUrlError(null);
+                        }}
+                        error={urlError}
+                        required
+                        mb="md"
+                    />
 
-    <TextInput
-        label={t`Width`}
-    placeholder="100%"
-    value={iframeWidth}
-    onChange={(event) => setIframeWidth(event.currentTarget.value)}
-    mb="md"
-    />
+                    <TextInput
+                        label={t`Width`}
+                        placeholder="100%"
+                        value={iframeWidth}
+                        onChange={(event) => setIframeWidth(event.currentTarget.value)}
+                        mb="md"
+                    />
 
-    <TextInput
-        label={t`Height (px)`}
-    placeholder="315"
-    value={iframeHeight}
-    onChange={(event) => setIframeHeight(event.currentTarget.value)}
-    mb="md"
-    />
+                    <TextInput
+                        label={t`Height (px)`}
+                        placeholder="315"
+                        value={iframeHeight}
+                        onChange={(event) => setIframeHeight(event.currentTarget.value)}
+                        mb="md"
+                    />
 
-    <TextInput
-        label={t`Title (for accessibility)`}
-    placeholder="Video title"
-    value={iframeTitle}
-    onChange={(event) => setIframeTitle(event.currentTarget.value)}
-    mb="md"
-    />
+                    <TextInput
+                        label={t`Title (for accessibility)`}
+                        placeholder="Video title"
+                        value={iframeTitle}
+                        onChange={(event) => setIframeTitle(event.currentTarget.value)}
+                        mb="md"
+                    />
 
-    <Group mt="md">
-    <Button onClick={handleIframeInsert}>
-        {t`Insert Iframe`}
-        </Button>
-        </Group>
-        </Modal>
-        </Portal>
+                    <Group mt="md">
+                        <Button onClick={handleIframeInsert}>
+                            {t`Insert Iframe`}
+                        </Button>
+                    </Group>
+                </Modal>
+            </Portal>
         </>
-);
+    );
 };
diff --git a/frontend/src/components/common/Editor/Extensions/IframeExtension/index.ts b/frontend/src/components/common/Editor/Extensions/IframeExtension/index.ts
index e69de29..6c4f084 100644
--- a/frontend/src/components/common/Editor/Extensions/IframeExtension/index.ts
+++ b/frontend/src/components/common/Editor/Extensions/IframeExtension/index.ts
@@ -0,0 +1,84 @@
+import {mergeAttributes, Node} from '@tiptap/core';
+
+export interface IframeOptions {
+    allowFullscreen: boolean;
+    HTMLAttributes: {
+        [key: string]: any;
+    };
+}
+
+declare module '@tiptap/core' {
+    interface Commands<ReturnType> {
+        iframe: {
+            setIframe: (options: { src: string; width?: string; height?: string; title?: string }) => ReturnType;
+        };
+    }
+}
+
+export const Iframe = Node.create<IframeOptions>({
+    name: 'iframe',
+
+    group: 'block',
+
+    atom: true,
+
+    addOptions() {
+        return {
+            allowFullscreen: true,
+            HTMLAttributes: {
+                class: 'iframe-wrapper',
+            },
+        };
+    },
+
+    addAttributes() {
+        return {
+            src: {
+                default: null,
+            },
+            width: {
+                default: '100%',
+            },
+            height: {
+                default: '315px',
+            },
+            frameborder: {
+                default: '0',
+            },
+            title: {
+                default: null,
+            },
+            allow: {
+                default: 'accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share',
+            },
+            style: {
+                default: 'width: 100%; height: 315px; border: 1px solid #ccc;',
+            },
+        };
+    },
+
+    parseHTML() {
+        return [
+            {
+                tag: 'iframe',
+            },
+        ];
+    },
+
+    renderHTML({HTMLAttributes}) {
+        return ['div', this.options.HTMLAttributes, ['iframe', mergeAttributes(HTMLAttributes)]];
+    },
+
+    addCommands() {
+        return {
+            setIframe:
+                (options) =>
+                    ({commands}) => {
+                        return commands.insertContent({
+                            type: this.name,
+                            attrs: options,
+                        });
+                    },
+        };
+    },
+});
diff --git a/frontend/src/components/common/Editor/index.tsx b/frontend/src/components/common/Editor/index.tsx
index 064b1b2..8e048d5 100644
--- a/frontend/src/components/common/Editor/index.tsx
+++ b/frontend/src/components/common/Editor/index.tsx
@@ -12,7 +12,9 @@ import classes from "./Editor.module.scss";
 import classNames from "classnames";
 import {Trans} from "@lingui/macro";
 import {InsertImageControl} from "./Controls/InsertImageControl";
+import {InsertIframeControl} from "./Controls/InsertIframeControl";
 import {ImageResize} from "./Extensions/ImageResizeExtension";
+import {Iframe} from "./Extensions/IframeExtension";
 
 interface EditorProps {
     onChange: (value: string) => void;
@@ -48,7 +50,13 @@ export const Editor = ({
             Image,
             ImageResize,
             TextStyle,
-            Color
+            Color,
+            Iframe.configure({
+                allowFullscreen: true,
+                HTMLAttributes: {
+                    class: 'iframe-wrapper',
+                },
+            }),
         ],
         onUpdate: ({editor}) => {
             const html = editor.getHTML();
@@ -141,6 +149,7 @@ export const Editor = ({
                             </RichTextEditor.ControlsGroup>
                             <RichTextEditor.ControlsGroup>
                                 <InsertImageControl/>
+                                <InsertIframeControl/>
                             </RichTextEditor.ControlsGroup>
                         </>
                     )}
@@ -187,6 +196,10 @@ export const Editor = ({
                                 <RichTextEditor.BulletList/>
                                 <RichTextEditor.OrderedList/>
                             </RichTextEditor.ControlsGroup>
+
+                            <RichTextEditor.ControlsGroup>
+                                <InsertIframeControl/>
+                            </RichTextEditor.ControlsGroup>
                         </>
                     )}
                 </RichTextEditor.Toolbar>
